# Attach to tmux only when not attached yet
if command -v tmux &>/dev/null && [[ -z "$TMUX" ]]; then
  if ! tmux has-session -t general 2>/dev/null; then
    tmux new-session -s general
  elif [[ -z "$(tmux list-clients -t general 2>/dev/null)" ]]; then
    tmux attach-session -t general
  fi
fi

# Setup fzf keybinding and fuzzy completion
eval "$(fzf --$(ps -p $$ -o comm=))"
if command -v fd >/dev/null 2>&1; then
  export FZF_DEFAULT_COMMAND="fd --type file --hidden --exclude .git"
  export FZF_ALT_C_COMMAND="fd --type directory --hidden"
elif command -v find >/dev/null 2>&1; then
  export FZF_DEFAULT_COMMAND="find . -type f -not -path '*/.git/*' -not -name '.git'"
  export FZF_ALT_C_COMMAND="find . -type d"
fi
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--border --height=60% --preview 'bat --line-range :500 {}' --walker-skip .git,node_modules"
export FZF_CTRL_R_OPTS="--layout=reverse --height 25% --border=top --scroll-off=0 --bind 'ctrl-y:execute-silent(echo -n {2..} | pbcopy)+abort'"
export FZF_ALT_C_OPTS="--border --height=60% --preview 'eza --tree --color=always {} | head -200'"
# Advanced customization
# - The first argument to the function is the name of the command.
# - You should make sure to pass the rest of the arguments to fzf.
_fzf_comprun() {
  local command=$1
  shift
  case "$command" in
    cd)           fzf --preview 'eza --tree --level=2 --color=always {} | head -200' "$@" ;;
    export|unset) fzf --preview "eval 'echo $'{}"         "$@" ;;
    ssh)          fzf --preview 'dig {}'                   "$@" ;;
    *)            fzf --preview "bat --line-range :200 {}" "$@" ;;
  esac
}
# Searching Git objects
# Repo: https://github.com/junegunn/fzf-git.sh
# - CTRL-G-F for Files
# - CTRL-G-B for Branches
# - CTRL-G-T for Tags
# - CTRL-G-R for Remotes
# - CTRL-G-H for commit Hashes
# - CTRL-G-S for Stashes
# - CTRL-G-L for reflogs
# - CTRL-G-W for Worktrees
# - CTRL-G-E for Each ref (git for-each-ref)
# [[ -f $HOME/Clones/fzf-git.sh/fzf-git.sh ]] && source $HOME/Clones/fzf-git.sh/fzf-git.sh

# eval $(thefuck --alias)
# eval $(thefuck --alias fk)
eval "$(zoxide init $(ps -p $$ -o comm=))"
# eval "$(starship init $(ps -p $$ -o comm=))"

function condainit() {
  local CONDA_BASE="$HOME/Programs"
  if [[ -f "$CONDA_BASE/miniconda3/bin/activate" ]]; then
    source "$CONDA_BASE/miniconda3/bin/activate"
    return 0
  elif [[ -f "$CONDA_BASE/anaconda3/bin/activate" ]]; then
    source "$CONDA_BASE/anaconda3/bin/activate"
    return 0
  else
    echo "Neither Miniconda nor Anaconda installation found in $CONDA_BASE"
    return 1
  fi
}

function nvminit() {
  export NVM_DIR="$HOME/.nvm"
  [[ -s "$NVM_DIR/nvm.sh" ]] && \. "$NVM_DIR/nvm.sh"
  [[ -s "$NVM_DIR/bash_completion" ]] && \. "$NVM_DIR/bash_completion"
}

# Change current working directory when exiting Yazi
function yazicd() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [[ -n "$cwd" ]] && [[ "$cwd" != "$PWD" ]]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# Change current working directory when exiting Vifm
function vifmcd() {
  local dst="$(command vifm --choose-dir - "$@")"
  if [[ -z "$dst" ]]; then
    echo 'Directory picking cancelled/failed'
    return 1
  fi
  cd "$dst"
}
