" ------------------------------------------------------------------------------
" Options
" ------------------------------------------------------------------------------

only
filter
screen!

set vicmd=nvim
set syscalls
" set syncregs=main
set trash
set trashdir=$XDG_DATA_HOME/Trash/files,%r/.vifm-Trash-%u,%r/.vifm-Trash
set vifminfo=chistory,shistory,phistory,fhistory,dirstack,registers,bmarks
set sessionoptions=tui,state,tabs,savedirs,dhistory
set history=50
set undolevels=50
set autochpos
set nofollowlinks
set dotfiles
set sortnumbers
set norunexec
set autocd
set vimhelp
set notitle
set timeoutlen=1000
set mintimeoutlen=200
set mouse=a
set confirm-=delete
set dotdirs=treeleafsparent
set dirsize=nitems
set shortmess=LMTp
set tabscope=global
set cdpath=~

if has('unix')
  set slowfs=curlftpfs,sshfs,nfs,nfs4,cifs
endif

set millerview
set milleroptions=lsize:1,csize:3,rsize:4,rpreview:all

set previewoptions=maxtreedepth:1
set suggestoptions=delay:400,normal,visual,view,otherpane,keys,marks,registers
set hloptions=filehi:onerow
set tuioptions=pu
set uioptions=iodetails
set navoptions=open:dirs
set cpoptions=s
set iooptions+=fastfilecloning

set ignorecase
set smartcase
set nohlsearch
set incsearch
set number
set relativenumber
set numberwidth=2
set scrolloff=4
set nowrap
set wildmenu
set wildstyle=popup
set wildinc=:cd,:edit,:set,:setlocal,:setglobal,:move,:copy,:goto,:bmgo,:wingo,:help

set grepprg="rg --hidden --color=never --line-number %i %a %s"
set findprg="fd --hidden --color=never %p %s"

if system('id -u') == '0'
  let g:root_prefix='root'
else
  let g:root_prefix=''
endif

set timefmt="%Y/%m/%d %H:%M"
set sizefmt=units:iec,space,precision:2
set rulerformat="%l/%S [%x]"
set viewcolumns=-{name},8{size},18{mtime}
set statusline="%2*%[%{g:root_prefix}  %]%0*%A  %u:%-g %d  %E  %1*%[-> %T%]%0* %= [%a / %c]    %P"

" ------------------------------------------------------------------------------
" Commands
" ------------------------------------------------------------------------------

" These are some of the macros that can be used in the action part:
"  %a for user arguments
"  %c for current file under the cursor
"  %C for current file under the cursor of inactive pane
"  %f for selected file(s)
"  %F for selected file(s) of inactive pane
"  %b is the same as %f %F
"  %d for current directory name
"  %D for current directory name of inactive pane
"  %r{x} for list of files in register {x}
"  %m runs the command in a menu window
"  %u uses command's output to build a file list
"  see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

command! df df -h %m 2>/dev/null
command! du du -sh %d %m 2>/dev/null

command! diff nvim -d %f %F
command! gdiff git diff %c

command! zip zip -r %c.zip %f
command! unzip unzip -q %f
command! compress 7z a -t7z -mx=9 -mhe=on -p %a %f
command! extract 7z x -aou -o%a %f

command! mkcd :mkdir %a | cd %a
command! bak :clone %c.bak

command! run !! ./%f
command! make !!make %a

command! reload :write | restart full

command! z :execute 'cd' fnameescape(term('zoxide query -i'))

" Grep literal string under current directory, search matches with fzf, and open in nvim
" Vifm have a builtin command `grep` and show matches in a menu
command! gd :
      \| if '%a' == ''
      \|   echo 'Search pattern required'
      \| else
      \|   let g:res = term("
      \      matches=$(rg --hidden --color=always --line-number -- \"%a\");
      \      if [[ -z $matches ]]; then
      \        echo 'GREP_NO_MATCHES';
      \      else
      \        echo \"$matches\" | sort | fzf --ansi --delimiter=: --smart-case
      \          --prompt 'grep ❯ '
      \          --preview 'bat --number --color=always --paging=never --wrap=never --line-range={2}: {1}'
      \          --bind 'enter:execute([[ -n $TMUX ]] && tmux new-window \"nvim {1} +{2}\" || nvim {1} +{2})';
      \      fi
      \    ")
      \|   if g:res == 'GREP_NO_MATCHES'
      \|     echo 'No matches found'
      \|   endif
      \| endif

" Toggle millerview preview panel
let g:millerview_preview_flag = 1
command! togglepreview :
      \| if g:millerview_preview_flag == 1
      \|   set milleroptions=lsize:1,csize:7
      \|   let g:millerview_preview_flag = 0
      \| else
      \|   set milleroptions=lsize:1,csize:3,rsize:4,rpreview:all
      \|   let g:millerview_preview_flag = 1
      \| endif

" ------------------------------------------------------------------------------
" Command abbreviations
" ------------------------------------------------------------------------------

cabbrev h help
cabbrev fc filter clear

" ------------------------------------------------------------------------------
" Key mappings
" ------------------------------------------------------------------------------

noremap <silent> J 5j
noremap <silent> K 5k

noremap <silent> q :q<CR>
noremap <silent> Q :qa<CR>

" Rename
noremap <silent> I cw<C-a>
noremap <silent> cc cw<C-u>
noremap <silent> A cw
noremap <silent> i cw
noremap <silent> gi :%rename<CR>

noremap <silent> ! :!
noremap <silent> @ :!<space>%f<left><left><left>

" Start shell in current directory
nnoremap <silent> x :shell<CR>
nnoremap <silent> X :shell!<CR>

" Display sorting dialog
nnoremap <silent> ss :sort<CR>

" Toggle showing hidden files
nnoremap <silent> zh :set dotfiles!<CR>

" Toggle wrap setting on ,w key
nnoremap <silent> ,w :set wrap!<CR>

" Toggle millerview preview panel (Ctrl-/ or ,p)
nnoremap <silent> <C-_> :togglepreview<CR>
nnoremap <silent> ,p :togglepreview<CR>

" Select item
nnoremap <silent> <Space> tj

nnoremap <silent> mk :mkdir<Space>
nnoremap <silent> ft :touch<Space>

nnoremap <silent> ff :filter<Space>
nnoremap <silent> fn :filter!<Space>

" Grep string under current directory and open the match with nvim
nnoremap <silent> <C-s> :gd<Space>

" Resize pane
nnoremap <silent> > :wincmd ><CR>
nnoremap <silent> < :wincmd <<CR>
nnoremap <silent> _ :5 wincmd <<CR>
nnoremap <silent> + :5 wincmd ><CR>

" Close current pane
nnoremap <silent> <C-w>q <C-w>w<C-w>o

" Prev/Next location
nnoremap <silent> <C-o> :histprev<CR>
nnoremap <silent> <C-i> :histnext<CR>

nnoremap <silent> <C-t> :tabnew | only | cd $HOME<CR>
nnoremap <silent> T :tabnew | only<CR>
nnoremap <silent> gt :tabnext<CR>
nnoremap <silent> gT :tabprevious<CR>
nnoremap <silent> <A-n> :tabnext<CR>
nnoremap <silent> <A-p> :tabprevious<CR>

noremap <silent> <F2> :rename<CR>
noremap <silent> <F3> :!less %f<CR>
noremap <silent> <F4> :edit<CR>
noremap <silent> <F5> :clone<CR>
noremap <silent> <F6> :move<CR>
" In trash (:lstrash) menu, 'r' to restore, 'dd' to delete permanently
nnoremap <silent> <F7> :lstrash<CR>
nnoremap <silent> <F8> :restore<CR>
nnoremap <silent> <F9> :chmod<CR>

" Auto enter navigation mode
" - <C-y> enter/exit nav mode
" - <C-j> exit nav mode while preserving cursor position
" - <Enter>, <Right> select item
" - <C-o>, <Left> go to parent directory
" - <C-n>, <Down> move cursor down
" - <C-p>, <Up> move cursor up
" - <Tab>, <C-i> move to next search match
" - <Shift-Tab> move to previous search match
" Search/Filter mode
" <C-n> / <C-p> navigate through search/filter history
nnoremap <silent> / /<c-y>
" = local filter, e.g. =\.txt$
" zr clear local filter without changing directory
" :filter global filter
nnoremap <silent> = =<c-y>
" Remap for navigation mode
anoremap <C-e> <C-j>

" Open file
nnoremap <silent> o :file<CR>
nnoremap O :
      \| let g:program = input('Open with: ')
      \| if g:program == 'nvim' || g:program == 'vim'
      \|   execute '!' . g:program . ' %c'
      \| else
      \|   execute '!' . g:program . ' %c %i'
      \| endif<CR>

nnoremap <silent> E :!nvim +"lua vim.g.quit_on_empty = false" %d<CR>

" Fzf search and navigate to selection
nnoremap <silent> <C-f> :
      \| let g:fzf_res = term('
      \    fd --type f --hidden --follow
      \    --exclude .git --exclude node_modules --exclude .venv |
      \    fzf --prompt "cwd ❯ " --border=none
      \  ')
      \| if g:fzf_res != ''
      \|   execute 'goto' fnameescape(g:fzf_res)
      \| endif<CR>
nnoremap <silent> F :
      \| let g:fzf_res = term('
      \    fd --type f --hidden --follow --base-directory $HOME --absolute-path
      \    --exclude .git --exclude node_modules --exclude .venv |
      \    fzf --prompt "home ❯ " --border=none
      \    ')
      \| if g:fzf_res != ''
      \|   execute 'goto' fnameescape(g:fzf_res)
      \| endif<CR>

" Yank current directory path
nnoremap <silent> yd :!echo -n %d | wl-copy %i && echo -n %d | wl-copy -p %i<CR>:echo "Directory path copied"<CR>
" Yank current file path
nnoremap <silent> yf :!echo -n %c:p | wl-copy %i && echo -n %c:p | wl-copy -p %i<CR>:echo "File path copied"<CR>

" Open current directory in the other pane
nnoremap <silent> <A-i> :sync<CR>
" Open directory under cursor in the other pane
nnoremap <silent> <A-o> :sync %c<CR>

nnoremap <silent> ,C :edit $XDG_CONFIG_HOME/vifm/vifmrc<CR>
nnoremap <silent> ,c :write | edit $XDG_CONFIG_HOME/vifm/vifmrc | restart full<CR>

" Use e to quit view mode
qnoremap e q

" ------------------------------------------------------------------------------
" Autocommands
" ------------------------------------------------------------------------------

" autocmd DirEnter $HOME/Downloads/**/* setlocal sort=-mtime,dir

" ------------------------------------------------------------------------------
" Bookmarks
" ------------------------------------------------------------------------------

" '<mark> to go to the location
mark h $HOME/ home
mark c $XDG_CONFIG_HOME/ config
mark p $HOME/Personal/ personal
mark w $HOME/Public/ public
mark d $HOME/Documents/ documents
mark x $HOME/Downloads/ downloads

" ------------------------------------------------------------------------------
" File type associations
" ------------------------------------------------------------------------------

" Text
filetype {*.sql,*.desktop,*.service,*.target},<text/*,application/x-sh,application/x-shellscript,application/javascript,application/toml,application/json,application/xml,application/yaml>
      \ nvim %f, vim %f, nvim --clean %f, vim --clean %f
filextype {*.htm,*.html,*.xhtml},<text/html>
      \ nvim %f, vim %f, nvim --clean %f, vim --clean %f, qutebrowser %f %i &, firefox %f %i &
fileviewer {*.htm,*.html},<text/html> w3m %f
fileviewer <text/*,application/x-sh,application/x-shellscript,application/javascript,application/toml,application/json,application/xml,application/yaml>
      \ bat --color=always --style=plain --paging=never --wrap=never --line-range=:200 %c

" Empty file
filetype <inode/x-empty,application/x-empty,application/x-zerosize> nvim %f, vim %f, nvim --clean %f, vim --clean %f
fileviewer <inode/x-empty,application/x-empty,application/x-zerosize> file --dereference --brief %c

" Video
filextype <video/*,application/vnd.rn-realmedia> mpv %f %i &, ffplay -fs -hide_banner -autoexit %f &
fileviewer <video/*,application/vnd.rn-realmedia> ffprobe -v quiet -hide_banner -show_format -pretty -i %c, #ueberzug#video %px %py %pw %ph %pc #ueberzug#clear

" Audio
filetype <audio/*> mpv --no-video %f %i %s &, ffplay -nodisp -hide_banner -autoexit %c &
fileviewer <audio/*> ffprobe -v quiet -hide_banner -show_format -pretty -i %c

" Images
filetype <image/*> imv %d -n %f %i &, swayimg %f %i &
fileviewer <image/gif> identify %c, #ueberzug#image_no_cache %px %py %pw %ph %pc #ueberzug#clear
fileviewer <image/*> identify %c, #ueberzug#image %px %py %pw %ph %pc #ueberzug#clear

" Pdf
filextype {*.pdf},<application/pdf> zathura %f %i &, zathura-sandbox %f %i &
fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -, #ueberzug#pdf %px %py %pw %ph %pc #ueberzug#clear

" Epub
filextype {*.ebup},<application/epub+zip> zathura %f %i &, zathura-sandbox %f %i &
fileviewer {*.ebup},<application/epub+zip> epub2txt %c -, #ueberzug#epub %px %py %pw %ph %pc #ueberzug#clear

" Office
filetype {*.odt,*.odp,*.dos,*.doc,*.docx,*.xls,*.xlsx,*.pptx,*.ppt},<application/.*opendocument.*,application/vnd.openxmlformats-officedocument.*,application/msword,application/vnd.ms-excel>
      \ libreoffice %f %i &
fileviewer {*.docx},<application/vnd.openxmlformats-officedocument.*> docx2txt %c -
fileviewer {*.doc},<application/msword> catdoc %c
fileviewer <application/.*opendocument.*> catdoc %c

" Zip
filetype <application/zip,application/java-archive>
      \ 7z x -aou %f,
      \ bsdtar -x -f %f,
      \ unzip %f
fileviewer {*.zip,*.jar,*.war,*.ear,*.oxt}
      \ 7z l -ba %c | awk '{print $1 " " $2 " - " $NF}',
      \ bsdtar -tvf %c | awk '{print $6 " " $7 " " $8 " - " $NF}',
      \ unzip -l %c %i

" Tar
filetype {*.tar,*.tar.bz2,*.tbz,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,*.tzst,*.zst},<application/x-tar,application/x-gzip,application/x-bzip2,application/x-xz,application/zstd>
      \ bsdtar -x -f %f,
      \ 7z x -aou %f,
      \ tar -tf %c,
      \ tar -xf %c
filetype {*.gz},<application/gzip>
      \ 7z x -aou %f,
      \ gzip -dq %f
fileviewer {*.tar},<application/x-tar>
      \ bsdtar -tvf %c | awk '{print $6 " " $7 " " $8 " - " $NF}',
      \ tar -tf %c
fileviewer {*.tgz,*.tar.gz},<application/x-gzip>
      \ bsdtar -tvf %c | awk '{print $6 " " $7 " " $8 " - " $NF}',
      \ tar -tzf %c
fileviewer {*.gz},<application/gzip>
      \ 7z l -ba %c | awk '{print $1 " " $2 " - " $NF}'
fileviewer {*.tar.bz2,*.tbz,*.tbz2},<application/x-bzip2>
      \ bsdtar -tvf %c | awk '{print $6 " " $7 " " $8 " - " $NF}',
      \ tar -tjf %c
fileviewer {*.tar.xz,*.txz},<application/x-xz>
      \ bsdtar -tvf %c | awk '{print $6 " " $7 " " $8 " - " $NF}',
      \ tar -tJf %c
fileviewer {*.tar.zst,*.tzst,*.zst},<application/zstd>
      \ bsdtar -tvf %c | awk '{print $6 " " $7 " " $8 " - " $NF}',
      \ tar -t --zstd -f %c

" Rar
filetype {*.rar},<application/x-rar>
      \ 7z x -aou %f,
      \ bsdtar -x -f %f,
      \ unrar x -o+ %f
fileviewer {*.rar},<application/x-rar>
      \ 7z l -ba %c | awk '{print $1 " " $2 " - " $NF}',
      \ bsdtar -tvf %c | awk '{print $8 " " $6 " " $7 " - " $NF}',
      \ unrar l %c

" 7z
filetype {*.7z},<application/x-7z-compressed>
      \ 7z x -aou %f,
      \ bsdtar -x -f %f
fileviewer {*.7z},<application/x-7z-compressed>
      \ 7z l -ba %c | awk '{print $1 " " $2 " - " $NF}',
      \ bsdtar -tvf %c | awk '{print $8 " " $6 " " $7 " - " $NF}'

" Iso
filetype {*.iso},<application/x-iso.*> FUSE_MOUNT|fuseiso %SOURCE_FILE %DESTINATION_DIR
filetype {*.iso},<application/x-iso.*> iso-info %c

" Database
filetype {*.sqlite,*.sqlite3},<application/vnd.sqlite3> visidata %c
filextype {*.sqlite,*.sqlite3},<application/vnd.sqlite3> sqlitebrowser %c %i &

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype <text/troff> man ./%c
fileviewer <text/troff> man ./%c | col -b

" TuDu
filetype {*.tudu} tudu -f %c

" Torrent
filetype {*.torrent},<application/x-bittorrent> ktorrent %f &
fileviewer {*.torrent},<application/x-bittorrent> dumptorrent -v %c, transmission-show %c

" Ssh
filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR %FOREGROUND
fileviewer *.ssh ssh-keygen -l -f %c

" Ftp
filetype *.ftp FUSE_MOUNT2|curlftpfs -o ftp_port=-,,disable_eprt %PARAM %DESTINATION_DIR %FOREGROUND

" MD5
filetype *.md5 md5sum -c %f %S

" SHA1
filetype *.sha1 sha1sum -c %f %S

" SHA256
filetype *.sha256 sha256sum -c %f %S

" SHA512
filetype *.sha512 sha512sum -c %f %S

" GPG signature
filetype {*.asc},<application/pgp-signature> !!gpg --verify %c

" Directory
filextype {*/},{.*/} imv %f %i &, xdg-open %f %i &
fileviewer {*/},{.*/} tree -C -L 1 --dirsfirst --noreport -a -q %c

" Fallback
filextype * xdg-open %f %i &
fileviewer * file --mime-type %c
      \ | grep -q "text/" && bat --color=always --style=plain --paging=never --wrap=never --line-range=:200 %c
      \ || file --dereference --brief %c

" ------------------------------------------------------------------------------
" Color scheme
" ------------------------------------------------------------------------------

colorscheme gruvbox nord palenight Default Default-256
highlight Win ctermbg=none
highlight AuxWin ctermbg=none
highlight OtherWin ctermbg=none
highlight LineNr ctermbg=none ctermfg=250
highlight TopLine ctermbg=none ctermfg=246
highlight TopLineSel ctermbg=none cterm=bold
highlight TabLine ctermbg=none
highlight TabLineSel ctermbg=none
highlight User1 ctermfg=cyan
highlight User2 ctermfg=red

" ------------------------------------------------------------------------------
" Icons
" ------------------------------------------------------------------------------

source $XDG_CONFIG_HOME/vifm/icons/icons.vifm
